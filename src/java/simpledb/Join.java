package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private OpIterator leftChild;
    private OpIterator rightChild;

    private List<Tuple> childTups = new ArrayList<>();
    private Iterator<Tuple> it;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param leftChild
     *            Iterator for the left(outer) relation to join
     * @param rightChild
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator leftChild, OpIterator rightChild) {
        // some code goes here
        this.p = p;
        this.leftChild = leftChild;
        this.rightChild = rightChild;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return leftChild.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return rightChild.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(leftChild.getTupleDesc(), rightChild.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        leftChild.open();
        rightChild.open();

        final TupleDesc tupleDesc = getTupleDesc();
        while (leftChild.hasNext())
        {
            Tuple leftChildTuple = leftChild.next();
            rightChild.rewind();
            while (rightChild.hasNext())
            {
                Tuple rightChildTuple = rightChild.next();
                if(p.filter(leftChildTuple, rightChildTuple))
                {
                    Tuple joinTuple = new Tuple(tupleDesc);

                    int field = 0;

                    Iterator<Field> leftFieldIt = leftChildTuple.fields();
                    while (leftFieldIt.hasNext())
                    {
                        joinTuple.setField(field++, leftFieldIt.next());
                    }

                    Iterator<Field> rightFieldIt = rightChildTuple.fields();
                    while (rightFieldIt.hasNext())
                    {
                        joinTuple.setField(field++, rightFieldIt.next());
                    }

                    childTups.add(joinTuple);
                }
            }
        }

        it = childTups.iterator();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        leftChild.close();
        rightChild.close();
        childTups.clear();
        it = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        it = childTups.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (it != null && it.hasNext()) {
            return it.next();
        } else
            return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] { this.leftChild, this.rightChild};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.leftChild = children[0];
        this.rightChild = children[1];
    }

}
